
STM_32_First_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b3c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ce8  08001ce8  00011ce8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d00  08001d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d08  08001d08  00011d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d0c  08001d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08001d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          000004b0  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004c0  200004c0  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000caba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ec1  00000000  00000000  0002cafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000056d1  00000000  00000000  0002e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00034090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  000348a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000041b7  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003acc  00000000  00000000  0003942f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003cefb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001678  00000000  00000000  0003cf78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001cd0 	.word	0x08001cd0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08001cd0 	.word	0x08001cd0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f89c 	bl	8000650 <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000528:	f000 f85e 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	2000000c 	.word	0x2000000c
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f82f 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f001 fa20 	bl	80019b0 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf1c      	itt	ne
 80005a8:	4b05      	ldrne	r3, [pc, #20]	; (80005c0 <HAL_Delay+0x24>)
 80005aa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf18      	it	ne
 80005b0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	f7ff ffed 	bl	8000590 <HAL_GetTick>
 80005b6:	1b40      	subs	r0, r0, r5
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d8fa      	bhi.n	80005b2 <HAL_Delay+0x16>
  {
  }
}
 80005bc:	bd38      	pop	{r3, r4, r5, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d4:	0200      	lsls	r0, r0, #8
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	bf28      	it	cs
 80005fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 0501 	mov.w	r5, #1
 8000604:	fa05 f303 	lsl.w	r3, r5, r3
 8000608:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060c:	bf8c      	ite	hi
 800060e:	3c03      	subhi	r4, #3
 8000610:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000612:	4019      	ands	r1, r3
 8000614:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000616:	fa05 f404 	lsl.w	r4, r5, r4
 800061a:	3c01      	subs	r4, #1
 800061c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800061e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	ea42 0201 	orr.w	r2, r2, r1
 8000624:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfad      	iteet	ge
 800062a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f000 000f 	andlt.w	r0, r0, #15
 8000632:	4b06      	ldrlt	r3, [pc, #24]	; (800064c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	bfb5      	itete	lt
 800063a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000ed14 	.word	0xe000ed14

08000650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000650:	3801      	subs	r0, #1
 8000652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000656:	d20a      	bcs.n	800066e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	21f0      	movs	r1, #240	; 0xf0
 8000660:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e010 	.word	0xe000e010
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000680:	b129      	cbz	r1, 800068e <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000686:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800068c:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800068e:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0U;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000690:	6822      	ldr	r2, [r4, #0]
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8000692:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8000694:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000696:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000698:	68a3      	ldr	r3, [r4, #8]
 800069a:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800069e:	4830      	ldr	r0, [pc, #192]	; (8000760 <ETH_MACDMAConfig+0xe4>)
 80006a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a4:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80006a8:	bf0c      	ite	eq
 80006aa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80006ae:	2100      	movne	r1, #0
 80006b0:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80006b2:	430b      	orrs	r3, r1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80006b4:	6013      	str	r3, [r2, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b6:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80006b8:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ba:	f7ff ff6f 	bl	800059c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80006be:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006c0:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80006c2:	601d      	str	r5, [r3, #0]
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006c4:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006c6:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80006c8:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ca:	f7ff ff67 	bl	800059c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80006d2:	2500      	movs	r5, #0
 80006d4:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80006d6:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80006d8:	699a      	ldr	r2, [r3, #24]
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006da:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80006de:	0412      	lsls	r2, r2, #16
 80006e0:	0c12      	lsrs	r2, r2, #16
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006e6:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e8:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80006ea:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ec:	f7ff ff56 	bl	800059c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006f0:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80006f4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006f6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006f8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006fa:	f7ff ff4f 	bl	800059c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006fe:	6822      	ldr	r2, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000702:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000704:	f241 0518 	movw	r5, #4120	; 0x1018
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000708:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 800070a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800070c:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800070e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000712:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000716:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000718:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800071a:	f7ff ff3f 	bl	800059c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800071e:	6823      	ldr	r3, [r4, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 8000722:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000728:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800072a:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800072c:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800072e:	f7ff ff35 	bl	800059c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000732:	6822      	ldr	r2, [r4, #0]
 8000734:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000738:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800073a:	69a3      	ldr	r3, [r4, #24]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d107      	bne.n	8000750 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000740:	f241 011c 	movw	r1, #4124	; 0x101c
 8000744:	5853      	ldr	r3, [r2, r1]
 8000746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000750:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000754:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000756:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000758:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <ETH_MACDMAConfig+0xf4>)
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	ff20810f 	.word	0xff20810f
 8000764:	f8de3f23 	.word	0xf8de3f23
 8000768:	02c12080 	.word	0x02c12080
 800076c:	40028040 	.word	0x40028040
 8000770:	40028044 	.word	0x40028044

08000774 <HAL_ETH_ReadPHYRegister>:
{
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000776:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800077a:	2b82      	cmp	r3, #130	; 0x82
{
 800077c:	4605      	mov	r5, r0
 800077e:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000780:	d030      	beq.n	80007e4 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000782:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000784:	2382      	movs	r3, #130	; 0x82
 8000786:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800078a:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800078c:	0189      	lsls	r1, r1, #6
 800078e:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000792:	f003 011c 	and.w	r1, r3, #28
 8000796:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000798:	8a04      	ldrh	r4, [r0, #16]
 800079a:	02e4      	lsls	r4, r4, #11
 800079c:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800079e:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80007a0:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80007a4:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80007a6:	f7ff fef3 	bl	8000590 <HAL_GetTick>
 80007aa:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80007ac:	f014 0001 	ands.w	r0, r4, #1
 80007b0:	d107      	bne.n	80007c2 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80007b2:	682b      	ldr	r3, [r5, #0]
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80007c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80007c2:	f7ff fee5 	bl	8000590 <HAL_GetTick>
 80007c6:	1bc0      	subs	r0, r0, r7
 80007c8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80007cc:	d307      	bcc.n	80007de <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80007ce:	2301      	movs	r3, #1
 80007d0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80007d4:	2300      	movs	r3, #0
 80007d6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80007da:	2003      	movs	r0, #3
 80007dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80007de:	682b      	ldr	r3, [r5, #0]
 80007e0:	691c      	ldr	r4, [r3, #16]
 80007e2:	e7e3      	b.n	80007ac <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80007e4:	2002      	movs	r0, #2
}
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007e8 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80007e8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80007ec:	2b42      	cmp	r3, #66	; 0x42
{
 80007ee:	b570      	push	{r4, r5, r6, lr}
 80007f0:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80007f2:	d02e      	beq.n	8000852 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80007f4:	2342      	movs	r3, #66	; 0x42
 80007f6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80007fa:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80007fc:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80007fe:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000800:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000804:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000808:	f000 001c 	and.w	r0, r0, #28
 800080c:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800080e:	8a2c      	ldrh	r4, [r5, #16]
 8000810:	02e4      	lsls	r4, r4, #11
 8000812:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000814:	4304      	orrs	r4, r0
 8000816:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000818:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 800081a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800081c:	f7ff feb8 	bl	8000590 <HAL_GetTick>
 8000820:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000822:	f014 0001 	ands.w	r0, r4, #1
 8000826:	d103      	bne.n	8000830 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000828:	2301      	movs	r3, #1
 800082a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800082e:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000830:	f7ff feae 	bl	8000590 <HAL_GetTick>
 8000834:	1b80      	subs	r0, r0, r6
 8000836:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800083a:	d307      	bcc.n	800084c <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 800083c:	2301      	movs	r3, #1
 800083e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000842:	2300      	movs	r3, #0
 8000844:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000848:	2003      	movs	r0, #3
 800084a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 800084c:	682b      	ldr	r3, [r5, #0]
 800084e:	691c      	ldr	r4, [r3, #16]
 8000850:	e7e7      	b.n	8000822 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000852:	2002      	movs	r0, #2
}
 8000854:	bd70      	pop	{r4, r5, r6, pc}
	...

08000858 <HAL_ETH_Init>:
{
 8000858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800085a:	2300      	movs	r3, #0
 800085c:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800085e:	4604      	mov	r4, r0
 8000860:	2800      	cmp	r0, #0
 8000862:	f000 80de 	beq.w	8000a22 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000866:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800086a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800086e:	b91b      	cbnz	r3, 8000878 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000870:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000874:	f001 f8b8 	bl	80019e8 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <HAL_ETH_Init+0x1d0>)
 800087e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000884:	645a      	str	r2, [r3, #68]	; 0x44
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000890:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <HAL_ETH_Init+0x1d4>)
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000898:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	6a21      	ldr	r1, [r4, #32]
 800089e:	430a      	orrs	r2, r1
 80008a0:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f042 0201 	orr.w	r2, r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b0:	f7ff fe6e 	bl	8000590 <HAL_GetTick>
 80008b4:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	07d0      	lsls	r0, r2, #31
 80008c0:	d41d      	bmi.n	80008fe <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008c2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80008c4:	f000 fcba 	bl	800123c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008c8:	4b59      	ldr	r3, [pc, #356]	; (8000a30 <HAL_ETH_Init+0x1d8>)
 80008ca:	4a5a      	ldr	r2, [pc, #360]	; (8000a34 <HAL_ETH_Init+0x1dc>)
 80008cc:	4403      	add	r3, r0
 80008ce:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008d0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008d4:	d822      	bhi.n	800091c <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80008d6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80008da:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80008dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80008e0:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4620      	mov	r0, r4
 80008e6:	f7ff ff7f 	bl	80007e8 <HAL_ETH_WritePHYRegister>
 80008ea:	4605      	mov	r5, r0
 80008ec:	b368      	cbz	r0, 800094a <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 80008f2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80008f4:	f7ff fec2 	bl	800067c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80008f8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80008fc:	e00b      	b.n	8000916 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008fe:	f7ff fe47 	bl	8000590 <HAL_GetTick>
 8000902:	1b40      	subs	r0, r0, r5
 8000904:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000908:	d9d5      	bls.n	80008b6 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800090a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 800090c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800090e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000916:	4628      	mov	r0, r5
 8000918:	b003      	add	sp, #12
 800091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <HAL_ETH_Init+0x1e0>)
 800091e:	4a47      	ldr	r2, [pc, #284]	; (8000a3c <HAL_ETH_Init+0x1e4>)
 8000920:	4403      	add	r3, r0
 8000922:	4293      	cmp	r3, r2
 8000924:	d802      	bhi.n	800092c <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000926:	f045 050c 	orr.w	r5, r5, #12
 800092a:	e7d6      	b.n	80008da <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <HAL_ETH_Init+0x1e8>)
 800092e:	4a45      	ldr	r2, [pc, #276]	; (8000a44 <HAL_ETH_Init+0x1ec>)
 8000930:	4403      	add	r3, r0
 8000932:	4293      	cmp	r3, r2
 8000934:	d9d1      	bls.n	80008da <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000936:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <HAL_ETH_Init+0x1f0>)
 8000938:	4a44      	ldr	r2, [pc, #272]	; (8000a4c <HAL_ETH_Init+0x1f4>)
 800093a:	4403      	add	r3, r0
 800093c:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800093e:	bf94      	ite	ls
 8000940:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000944:	f045 0510 	orrhi.w	r5, r5, #16
 8000948:	e7c7      	b.n	80008da <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	f7ff fe26 	bl	800059c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d053      	beq.n	80009fe <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000956:	f7ff fe1b 	bl	8000590 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800095a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800095e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000960:	466a      	mov	r2, sp
 8000962:	2101      	movs	r1, #1
 8000964:	4620      	mov	r0, r4
 8000966:	f7ff ff05 	bl	8000774 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800096a:	f7ff fe11 	bl	8000590 <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	42b8      	cmp	r0, r7
 8000972:	d90b      	bls.n	800098c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000974:	2101      	movs	r1, #1
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fe80 	bl	800067c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800097c:	2301      	movs	r3, #1
 800097e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000982:	2300      	movs	r3, #0
 8000984:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000988:	2503      	movs	r5, #3
 800098a:	e7c4      	b.n	8000916 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800098c:	9b00      	ldr	r3, [sp, #0]
 800098e:	0759      	lsls	r1, r3, #29
 8000990:	d5e6      	bpl.n	8000960 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000996:	2100      	movs	r1, #0
 8000998:	4620      	mov	r0, r4
 800099a:	f7ff ff25 	bl	80007e8 <HAL_ETH_WritePHYRegister>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1a5      	bne.n	80008ee <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 80009a2:	f7ff fdf5 	bl	8000590 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80009a6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009aa:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009ac:	466a      	mov	r2, sp
 80009ae:	2101      	movs	r1, #1
 80009b0:	4620      	mov	r0, r4
 80009b2:	f7ff fedf 	bl	8000774 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80009b6:	f7ff fdeb 	bl	8000590 <HAL_GetTick>
 80009ba:	1b80      	subs	r0, r0, r6
 80009bc:	42b8      	cmp	r0, r7
 80009be:	d8d9      	bhi.n	8000974 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80009c0:	9b00      	ldr	r3, [sp, #0]
 80009c2:	069a      	lsls	r2, r3, #26
 80009c4:	d5f2      	bpl.n	80009ac <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80009c6:	466a      	mov	r2, sp
 80009c8:	211f      	movs	r1, #31
 80009ca:	4620      	mov	r0, r4
 80009cc:	f7ff fed2 	bl	8000774 <HAL_ETH_ReadPHYRegister>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d18c      	bne.n	80008ee <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80009d4:	9b00      	ldr	r3, [sp, #0]
 80009d6:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80009da:	bf18      	it	ne
 80009dc:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80009e0:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 80009e2:	bf4c      	ite	mi
 80009e4:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 80009e6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80009ea:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 80009ec:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 80009ee:	2100      	movs	r1, #0
 80009f0:	4620      	mov	r0, r4
 80009f2:	f7ff fe43 	bl	800067c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80009fc:	e78b      	b.n	8000916 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80009fe:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a00:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000a02:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a04:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000a08:	b292      	uxth	r2, r2
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff feeb 	bl	80007e8 <HAL_ETH_WritePHYRegister>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	f47f af6b 	bne.w	80008ee <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a1c:	f7ff fdbe 	bl	800059c <HAL_Delay>
 8000a20:	e7e5      	b.n	80009ee <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000a22:	2501      	movs	r5, #1
 8000a24:	e777      	b.n	8000916 <HAL_ETH_Init+0xbe>
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	feced300 	.word	0xfeced300
 8000a34:	00e4e1bf 	.word	0x00e4e1bf
 8000a38:	fde9f140 	.word	0xfde9f140
 8000a3c:	017d783f 	.word	0x017d783f
 8000a40:	fc6c7900 	.word	0xfc6c7900
 8000a44:	026259ff 	.word	0x026259ff
 8000a48:	fa0a1f00 	.word	0xfa0a1f00
 8000a4c:	02faf07f 	.word	0x02faf07f

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a56:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000c20 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5c:	4a6e      	ldr	r2, [pc, #440]	; (8000c18 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000c24 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a62:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a64:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a66:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a68:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000a6a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000a6e:	42ac      	cmp	r4, r5
 8000a70:	f040 80b8 	bne.w	8000be4 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	684c      	ldr	r4, [r1, #4]
 8000a76:	f024 0c10 	bic.w	ip, r4, #16
 8000a7a:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000a7e:	2e01      	cmp	r6, #1
 8000a80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a84:	d812      	bhi.n	8000aac <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000a86:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a88:	2603      	movs	r6, #3
 8000a8a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a8e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a92:	68ce      	ldr	r6, [r1, #12]
 8000a94:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a98:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000a9a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a9e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa6:	409e      	lsls	r6, r3
 8000aa8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000aaa:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aac:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000aae:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ab4:	43f6      	mvns	r6, r6
 8000ab6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aba:	688f      	ldr	r7, [r1, #8]
 8000abc:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ac0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000ac8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aca:	d116      	bne.n	8000afa <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000acc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ad0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ad8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000adc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ae0:	f04f 0c0f 	mov.w	ip, #15
 8000ae4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ae8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aec:	690f      	ldr	r7, [r1, #16]
 8000aee:	fa07 f70b 	lsl.w	r7, r7, fp
 8000af2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000af6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000afa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000afc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000afe:	f004 0703 	and.w	r7, r4, #3
 8000b02:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b06:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b0a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0c:	00e6      	lsls	r6, r4, #3
 8000b0e:	d569      	bpl.n	8000be4 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	f04f 0b00 	mov.w	fp, #0
 8000b14:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b18:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b1c:	4e3f      	ldr	r6, [pc, #252]	; (8000c1c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b22:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b26:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b2a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b2e:	9703      	str	r7, [sp, #12]
 8000b30:	9f03      	ldr	r7, [sp, #12]
 8000b32:	f023 0703 	bic.w	r7, r3, #3
 8000b36:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b3a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b3e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b42:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b46:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b4a:	f04f 0e0f 	mov.w	lr, #15
 8000b4e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b52:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b54:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b58:	d04b      	beq.n	8000bf2 <HAL_GPIO_Init+0x1a2>
 8000b5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b5e:	42b0      	cmp	r0, r6
 8000b60:	d049      	beq.n	8000bf6 <HAL_GPIO_Init+0x1a6>
 8000b62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b66:	42b0      	cmp	r0, r6
 8000b68:	d047      	beq.n	8000bfa <HAL_GPIO_Init+0x1aa>
 8000b6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b6e:	42b0      	cmp	r0, r6
 8000b70:	d045      	beq.n	8000bfe <HAL_GPIO_Init+0x1ae>
 8000b72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b76:	42b0      	cmp	r0, r6
 8000b78:	d043      	beq.n	8000c02 <HAL_GPIO_Init+0x1b2>
 8000b7a:	4548      	cmp	r0, r9
 8000b7c:	d043      	beq.n	8000c06 <HAL_GPIO_Init+0x1b6>
 8000b7e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000b82:	42b0      	cmp	r0, r6
 8000b84:	d041      	beq.n	8000c0a <HAL_GPIO_Init+0x1ba>
 8000b86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b8a:	42b0      	cmp	r0, r6
 8000b8c:	d03f      	beq.n	8000c0e <HAL_GPIO_Init+0x1be>
 8000b8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b92:	42b0      	cmp	r0, r6
 8000b94:	d03d      	beq.n	8000c12 <HAL_GPIO_Init+0x1c2>
 8000b96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b9a:	42b0      	cmp	r0, r6
 8000b9c:	bf14      	ite	ne
 8000b9e:	260a      	movne	r6, #10
 8000ba0:	2609      	moveq	r6, #9
 8000ba2:	fa06 f60c 	lsl.w	r6, r6, ip
 8000ba6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000baa:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000bac:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bae:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	bf0c      	ite	eq
 8000bb6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bb8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000bba:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000bbc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bbe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	bf0c      	ite	eq
 8000bc4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bc6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000bc8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bcc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	bf0c      	ite	eq
 8000bd2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bd4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000bd6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000bd8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bda:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	bf54      	ite	pl
 8000bde:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000be0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000be2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be4:	3301      	adds	r3, #1
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	f47f af3d 	bne.w	8000a66 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bec:	b005      	add	sp, #20
 8000bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf2:	465e      	mov	r6, fp
 8000bf4:	e7d5      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	e7d3      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000bfa:	2602      	movs	r6, #2
 8000bfc:	e7d1      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000bfe:	2603      	movs	r6, #3
 8000c00:	e7cf      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c02:	2604      	movs	r6, #4
 8000c04:	e7cd      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c06:	2605      	movs	r6, #5
 8000c08:	e7cb      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c0a:	2606      	movs	r6, #6
 8000c0c:	e7c9      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c0e:	2607      	movs	r6, #7
 8000c10:	e7c7      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c12:	2608      	movs	r6, #8
 8000c14:	e7c5      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000c16:	bf00      	nop
 8000c18:	40013c00 	.word	0x40013c00
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40021400 	.word	0x40021400

08000c28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c28:	6903      	ldr	r3, [r0, #16]
 8000c2a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c2c:	bf14      	ite	ne
 8000c2e:	2001      	movne	r0, #1
 8000c30:	2000      	moveq	r0, #0
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c34:	b10a      	cbz	r2, 8000c3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c36:	6181      	str	r1, [r0, #24]
 8000c38:	4770      	bx	lr
 8000c3a:	0409      	lsls	r1, r1, #16
 8000c3c:	e7fb      	b.n	8000c36 <HAL_GPIO_WritePin+0x2>

08000c3e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c3e:	6943      	ldr	r3, [r0, #20]
 8000c40:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c44:	bf08      	it	eq
 8000c46:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c48:	6181      	str	r1, [r0, #24]
 8000c4a:	4770      	bx	lr

08000c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c4e:	4604      	mov	r4, r0
{
 8000c50:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000c52:	b360      	cbz	r0, 8000cae <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c54:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000c58:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c5e:	b91b      	cbnz	r3, 8000c68 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c60:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c64:	f000 ff84 	bl	8001b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c70:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c72:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000c76:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000c7a:	bf08      	it	eq
 8000c7c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000c7e:	f000 fbf7 	bl	8001470 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c84:	466e      	mov	r6, sp
 8000c86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c90:	e886 0003 	stmia.w	r6, {r0, r1}
 8000c94:	4625      	mov	r5, r4
 8000c96:	1d27      	adds	r7, r4, #4
 8000c98:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c9c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000ca0:	f000 fba6 	bl	80013f0 <USB_CoreInit>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	b120      	cbz	r0, 8000cb2 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000cae:	2501      	movs	r5, #1
 8000cb0:	e050      	b.n	8000d54 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	6820      	ldr	r0, [r4, #0]
 8000cb6:	f000 fbe1 	bl	800147c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cc0:	261c      	movs	r6, #28
 8000cc2:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cca:	4596      	cmp	lr, r2
 8000ccc:	f100 0001 	add.w	r0, r0, #1
 8000cd0:	d81c      	bhi.n	8000d0c <HAL_PCD_Init+0xc0>
 8000cd2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cd4:	261c      	movs	r6, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cda:	4586      	cmp	lr, r0
 8000cdc:	f103 0301 	add.w	r3, r3, #1
 8000ce0:	d822      	bhi.n	8000d28 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	466e      	mov	r6, sp
 8000ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cf0:	e886 0003 	stmia.w	r6, {r0, r1}
 8000cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cf8:	6820      	ldr	r0, [r4, #0]
 8000cfa:	f000 fc01 	bl	8001500 <USB_DevInit>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4605      	mov	r5, r0
 8000d02:	b300      	cbz	r0, 8000d46 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d04:	2202      	movs	r2, #2
 8000d06:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000d0a:	e7d0      	b.n	8000cae <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000d0c:	fb06 4302 	mla	r3, r6, r2, r4
 8000d10:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d1c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d20:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d22:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d24:	6519      	str	r1, [r3, #80]	; 0x50
 8000d26:	e7cf      	b.n	8000cc8 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000d28:	fb06 4200 	mla	r2, r6, r0, r4
 8000d2c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000d30:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d34:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d38:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d3c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d40:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000d44:	e7c8      	b.n	8000cd8 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000d46:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d4a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d4e:	6820      	ldr	r0, [r4, #0]
 8000d50:	f000 fc90 	bl	8001674 <USB_DevDisconnect>

  return HAL_OK;
}
 8000d54:	4628      	mov	r0, r5
 8000d56:	b00b      	add	sp, #44	; 0x2c
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d60:	4604      	mov	r4, r0
 8000d62:	b908      	cbnz	r0, 8000d68 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
 8000d66:	e03f      	b.n	8000de8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	07dd      	lsls	r5, r3, #31
 8000d6c:	d410      	bmi.n	8000d90 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	0798      	lsls	r0, r3, #30
 8000d72:	d45a      	bmi.n	8000e2a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	071a      	lsls	r2, r3, #28
 8000d78:	f100 809c 	bmi.w	8000eb4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	075b      	lsls	r3, r3, #29
 8000d80:	f100 80ba 	bmi.w	8000ef8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d84:	69a0      	ldr	r0, [r4, #24]
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f040 811b 	bne.w	8000fc2 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e02b      	b.n	8000de8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d90:	4ba4      	ldr	r3, [pc, #656]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f002 020c 	and.w	r2, r2, #12
 8000d98:	2a04      	cmp	r2, #4
 8000d9a:	d007      	beq.n	8000dac <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000da2:	2a08      	cmp	r2, #8
 8000da4:	d10a      	bne.n	8000dbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	0259      	lsls	r1, r3, #9
 8000daa:	d507      	bpl.n	8000dbc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	4b9d      	ldr	r3, [pc, #628]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	039a      	lsls	r2, r3, #14
 8000db2:	d5dc      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x12>
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1d9      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
 8000dba:	e7d3      	b.n	8000d64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	4d99      	ldr	r5, [pc, #612]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d113      	bne.n	8000dee <HAL_RCC_OscConfig+0x92>
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dce:	f7ff fbdf 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd2:	4d94      	ldr	r5, [pc, #592]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000dd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	039b      	lsls	r3, r3, #14
 8000dda:	d4c8      	bmi.n	8000d6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fbd8 	bl	8000590 <HAL_GetTick>
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	2864      	cmp	r0, #100	; 0x64
 8000de4:	d9f7      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000de6:	2003      	movs	r0, #3
}
 8000de8:	b002      	add	sp, #8
 8000dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df2:	d104      	bne.n	8000dfe <HAL_RCC_OscConfig+0xa2>
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	e7e3      	b.n	8000dc6 <HAL_RCC_OscConfig+0x6a>
 8000dfe:	682a      	ldr	r2, [r5, #0]
 8000e00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e04:	602a      	str	r2, [r5, #0]
 8000e06:	682a      	ldr	r2, [r5, #0]
 8000e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e0c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1dd      	bne.n	8000dce <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000e12:	f7ff fbbd 	bl	8000590 <HAL_GetTick>
 8000e16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	039f      	lsls	r7, r3, #14
 8000e1c:	d5a7      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fbb7 	bl	8000590 <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	2864      	cmp	r0, #100	; 0x64
 8000e26:	d9f7      	bls.n	8000e18 <HAL_RCC_OscConfig+0xbc>
 8000e28:	e7dd      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e2a:	4b7e      	ldr	r3, [pc, #504]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f012 0f0c 	tst.w	r2, #12
 8000e32:	d007      	beq.n	8000e44 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e3a:	2a08      	cmp	r2, #8
 8000e3c:	d111      	bne.n	8000e62 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	025e      	lsls	r6, r3, #9
 8000e42:	d40e      	bmi.n	8000e62 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e44:	4b77      	ldr	r3, [pc, #476]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	0795      	lsls	r5, r2, #30
 8000e4a:	d502      	bpl.n	8000e52 <HAL_RCC_OscConfig+0xf6>
 8000e4c:	68e2      	ldr	r2, [r4, #12]
 8000e4e:	2a01      	cmp	r2, #1
 8000e50:	d188      	bne.n	8000d64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	6921      	ldr	r1, [r4, #16]
 8000e56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e60:	e788      	b.n	8000d74 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e62:	68e2      	ldr	r2, [r4, #12]
 8000e64:	4b70      	ldr	r3, [pc, #448]	; (8001028 <HAL_RCC_OscConfig+0x2cc>)
 8000e66:	b1b2      	cbz	r2, 8000e96 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fb90 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4d6c      	ldr	r5, [pc, #432]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	0798      	lsls	r0, r3, #30
 8000e78:	d507      	bpl.n	8000e8a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	6922      	ldr	r2, [r4, #16]
 8000e7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	e774      	b.n	8000d74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fb81 	bl	8000590 <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d9ef      	bls.n	8000e74 <HAL_RCC_OscConfig+0x118>
 8000e94:	e7a7      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000e96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fb7a 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9c:	4d61      	ldr	r5, [pc, #388]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	0799      	lsls	r1, r3, #30
 8000ea4:	f57f af66 	bpl.w	8000d74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fb72 	bl	8000590 <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x144>
 8000eb2:	e798      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000eb4:	6962      	ldr	r2, [r4, #20]
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <HAL_RCC_OscConfig+0x2d0>)
 8000eb8:	b17a      	cbz	r2, 8000eda <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fb67 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	4d58      	ldr	r5, [pc, #352]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ec4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ec8:	079f      	lsls	r7, r3, #30
 8000eca:	f53f af57 	bmi.w	8000d7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fb5f 	bl	8000590 <HAL_GetTick>
 8000ed2:	1b80      	subs	r0, r0, r6
 8000ed4:	2802      	cmp	r0, #2
 8000ed6:	d9f6      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x16a>
 8000ed8:	e785      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000eda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000edc:	f7ff fb58 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4d50      	ldr	r5, [pc, #320]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ee2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ee6:	0798      	lsls	r0, r3, #30
 8000ee8:	f57f af48 	bpl.w	8000d7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fb50 	bl	8000590 <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9f6      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x188>
 8000ef6:	e776      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000f00:	d128      	bne.n	8000f54 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	9201      	str	r2, [sp, #4]
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f16:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	4d45      	ldr	r5, [pc, #276]	; (8001030 <HAL_RCC_OscConfig+0x2d4>)
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	05d9      	lsls	r1, r3, #23
 8000f1e:	d51b      	bpl.n	8000f58 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f20:	68a3      	ldr	r3, [r4, #8]
 8000f22:	4d40      	ldr	r5, [pc, #256]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d127      	bne.n	8000f78 <HAL_RCC_OscConfig+0x21c>
 8000f28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb2e 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	4d3b      	ldr	r5, [pc, #236]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f3e:	079b      	lsls	r3, r3, #30
 8000f40:	d539      	bpl.n	8000fb6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	f43f af1e 	beq.w	8000d84 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f48:	4a36      	ldr	r2, [pc, #216]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000f4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	e717      	b.n	8000d84 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f54:	2600      	movs	r6, #0
 8000f56:	e7df      	b.n	8000f18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f60:	f7ff fb16 	bl	8000590 <HAL_GetTick>
 8000f64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	05da      	lsls	r2, r3, #23
 8000f6a:	d4d9      	bmi.n	8000f20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6c:	f7ff fb10 	bl	8000590 <HAL_GetTick>
 8000f70:	1bc0      	subs	r0, r0, r7
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f7      	bls.n	8000f66 <HAL_RCC_OscConfig+0x20a>
 8000f76:	e736      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d104      	bne.n	8000f86 <HAL_RCC_OscConfig+0x22a>
 8000f7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	672b      	str	r3, [r5, #112]	; 0x70
 8000f84:	e7d0      	b.n	8000f28 <HAL_RCC_OscConfig+0x1cc>
 8000f86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	672a      	str	r2, [r5, #112]	; 0x70
 8000f8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f90:	f022 0204 	bic.w	r2, r2, #4
 8000f94:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1ca      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f9a:	f7ff faf9 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fa2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fa6:	0798      	lsls	r0, r3, #30
 8000fa8:	d5cb      	bpl.n	8000f42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff faf1 	bl	8000590 <HAL_GetTick>
 8000fae:	1bc0      	subs	r0, r0, r7
 8000fb0:	4540      	cmp	r0, r8
 8000fb2:	d9f7      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x248>
 8000fb4:	e717      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff faeb 	bl	8000590 <HAL_GetTick>
 8000fba:	1bc0      	subs	r0, r0, r7
 8000fbc:	4540      	cmp	r0, r8
 8000fbe:	d9bd      	bls.n	8000f3c <HAL_RCC_OscConfig+0x1e0>
 8000fc0:	e711      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fc2:	4d18      	ldr	r5, [pc, #96]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
 8000fc4:	68ab      	ldr	r3, [r5, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d047      	beq.n	800105e <HAL_RCC_OscConfig+0x302>
 8000fce:	4e19      	ldr	r6, [pc, #100]	; (8001034 <HAL_RCC_OscConfig+0x2d8>)
 8000fd0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000fd4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd6:	d135      	bne.n	8001044 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fada 	bl	8000590 <HAL_GetTick>
 8000fdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	0199      	lsls	r1, r3, #6
 8000fe2:	d429      	bmi.n	8001038 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fe4:	6a22      	ldr	r2, [r4, #32]
 8000fe6:	69e3      	ldr	r3, [r4, #28]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ff2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	; (8001024 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ffa:	0852      	lsrs	r2, r2, #1
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001002:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001004:	2301      	movs	r3, #1
 8001006:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001008:	f7ff fac2 	bl	8000590 <HAL_GetTick>
 800100c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	019a      	lsls	r2, r3, #6
 8001012:	f53f aebb 	bmi.w	8000d8c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fabb 	bl	8000590 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	d9f6      	bls.n	800100e <HAL_RCC_OscConfig+0x2b2>
 8001020:	e6e1      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	42470000 	.word	0x42470000
 800102c:	42470e80 	.word	0x42470e80
 8001030:	40007000 	.word	0x40007000
 8001034:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff faaa 	bl	8000590 <HAL_GetTick>
 800103c:	1bc0      	subs	r0, r0, r7
 800103e:	2802      	cmp	r0, #2
 8001040:	d9cd      	bls.n	8000fde <HAL_RCC_OscConfig+0x282>
 8001042:	e6d0      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001044:	f7ff faa4 	bl	8000590 <HAL_GetTick>
 8001048:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	f57f ae9d 	bpl.w	8000d8c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001052:	f7ff fa9d 	bl	8000590 <HAL_GetTick>
 8001056:	1b00      	subs	r0, r0, r4
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f6      	bls.n	800104a <HAL_RCC_OscConfig+0x2ee>
 800105c:	e6c3      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800105e:	2801      	cmp	r0, #1
 8001060:	f43f aec2 	beq.w	8000de8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8001064:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	69e3      	ldr	r3, [r4, #28]
 8001068:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 800106c:	429a      	cmp	r2, r3
 800106e:	f47f ae79 	bne.w	8000d64 <HAL_RCC_OscConfig+0x8>
 8001072:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001074:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001078:	4293      	cmp	r3, r2
 800107a:	f47f ae73 	bne.w	8000d64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800107e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001084:	4003      	ands	r3, r0
 8001086:	4293      	cmp	r3, r2
 8001088:	f47f ae6c 	bne.w	8000d64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800108c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800108e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001092:	4293      	cmp	r3, r2
 8001094:	f47f ae66 	bne.w	8000d64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800109a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 800109e:	1ac0      	subs	r0, r0, r3
 80010a0:	bf18      	it	ne
 80010a2:	2001      	movne	r0, #1
 80010a4:	e6a0      	b.n	8000de8 <HAL_RCC_OscConfig+0x8c>
 80010a6:	bf00      	nop

080010a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010a8:	4913      	ldr	r1, [pc, #76]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80010aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010ac:	688b      	ldr	r3, [r1, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d003      	beq.n	80010be <HAL_RCC_GetSysClockFreq+0x16>
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d003      	beq.n	80010c2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010bc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <HAL_RCC_GetSysClockFreq+0x58>)
 80010c0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010cc:	bf14      	ite	ne
 80010ce:	480c      	ldrne	r0, [pc, #48]	; (8001100 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d0:	480a      	ldreq	r0, [pc, #40]	; (80010fc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010d6:	bf18      	it	ne
 80010d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010de:	fba1 0100 	umull	r0, r1, r1, r0
 80010e2:	f7ff f883 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010ee:	3301      	adds	r3, #1
 80010f0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80010f6:	bd08      	pop	{r3, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	00f42400 	.word	0x00f42400
 8001100:	007a1200 	.word	0x007a1200

08001104 <HAL_RCC_ClockConfig>:
{
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800110a:	4604      	mov	r4, r0
 800110c:	b910      	cbnz	r0, 8001114 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800110e:	2001      	movs	r0, #1
 8001110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <HAL_RCC_ClockConfig+0x124>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f002 020f 	and.w	r2, r2, #15
 800111c:	428a      	cmp	r2, r1
 800111e:	d329      	bcc.n	8001174 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001120:	6821      	ldr	r1, [r4, #0]
 8001122:	078f      	lsls	r7, r1, #30
 8001124:	d42e      	bmi.n	8001184 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001126:	07c8      	lsls	r0, r1, #31
 8001128:	d441      	bmi.n	80011ae <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_ClockConfig+0x124>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	f002 020f 	and.w	r2, r2, #15
 8001132:	4295      	cmp	r5, r2
 8001134:	d367      	bcc.n	8001206 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001136:	6822      	ldr	r2, [r4, #0]
 8001138:	0751      	lsls	r1, r2, #29
 800113a:	d46d      	bmi.n	8001218 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113c:	0713      	lsls	r3, r2, #28
 800113e:	d507      	bpl.n	8001150 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001140:	4a3a      	ldr	r2, [pc, #232]	; (800122c <HAL_RCC_ClockConfig+0x128>)
 8001142:	6921      	ldr	r1, [r4, #16]
 8001144:	6893      	ldr	r3, [r2, #8]
 8001146:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800114a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800114e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001150:	f7ff ffaa 	bl	80010a8 <HAL_RCC_GetSysClockFreq>
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <HAL_RCC_ClockConfig+0x128>)
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <HAL_RCC_ClockConfig+0x12c>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	40d8      	lsrs	r0, r3
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_RCC_ClockConfig+0x130>)
 8001164:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_RCC_ClockConfig+0x134>)
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	f7ff f9c7 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 800116e:	2000      	movs	r0, #0
 8001170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001174:	b2ca      	uxtb	r2, r1
 8001176:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4299      	cmp	r1, r3
 8001180:	d1c5      	bne.n	800110e <HAL_RCC_ClockConfig+0xa>
 8001182:	e7cd      	b.n	8001120 <HAL_RCC_ClockConfig+0x1c>
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001186:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118a:	bf1e      	ittt	ne
 800118c:	689a      	ldrne	r2, [r3, #8]
 800118e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001192:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001196:	bf42      	ittt	mi
 8001198:	689a      	ldrmi	r2, [r3, #8]
 800119a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800119e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	68a0      	ldr	r0, [r4, #8]
 80011a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011a8:	4302      	orrs	r2, r0
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e7bb      	b.n	8001126 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_RCC_ClockConfig+0x128>)
 80011b2:	2a01      	cmp	r2, #1
 80011b4:	d11d      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	d0a7      	beq.n	800110e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4e1b      	ldr	r6, [pc, #108]	; (800122c <HAL_RCC_ClockConfig+0x128>)
 80011c0:	68b3      	ldr	r3, [r6, #8]
 80011c2:	f023 0303 	bic.w	r3, r3, #3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80011ca:	f7ff f9e1 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d4:	68b3      	ldr	r3, [r6, #8]
 80011d6:	6862      	ldr	r2, [r4, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011e0:	d0a3      	beq.n	800112a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e2:	f7ff f9d5 	bl	8000590 <HAL_GetTick>
 80011e6:	1bc0      	subs	r0, r0, r7
 80011e8:	4540      	cmp	r0, r8
 80011ea:	d9f3      	bls.n	80011d4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
}
 80011ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	1e91      	subs	r1, r2, #2
 80011f4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f8:	d802      	bhi.n	8001200 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011fe:	e7dd      	b.n	80011bc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	f013 0f02 	tst.w	r3, #2
 8001204:	e7da      	b.n	80011bc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	b2ea      	uxtb	r2, r5
 8001208:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	429d      	cmp	r5, r3
 8001212:	f47f af7c 	bne.w	800110e <HAL_RCC_ClockConfig+0xa>
 8001216:	e78e      	b.n	8001136 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <HAL_RCC_ClockConfig+0x128>)
 800121a:	68e0      	ldr	r0, [r4, #12]
 800121c:	688b      	ldr	r3, [r1, #8]
 800121e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001222:	4303      	orrs	r3, r0
 8001224:	608b      	str	r3, [r1, #8]
 8001226:	e789      	b.n	800113c <HAL_RCC_ClockConfig+0x38>
 8001228:	40023c00 	.word	0x40023c00
 800122c:	40023800 	.word	0x40023800
 8001230:	08001ce8 	.word	0x08001ce8
 8001234:	2000000c 	.word	0x2000000c
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <HAL_RCC_GetHCLKFreq+0x8>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c

08001248 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_RCC_GetPCLK1Freq+0x14>)
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x18>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001256:	6810      	ldr	r0, [r2, #0]
}
 8001258:	40d8      	lsrs	r0, r3
 800125a:	4770      	bx	lr
 800125c:	40023800 	.word	0x40023800
 8001260:	08001cf8 	.word	0x08001cf8
 8001264:	2000000c 	.word	0x2000000c

08001268 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetPCLK2Freq+0x14>)
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x18>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001276:	6810      	ldr	r0, [r2, #0]
}
 8001278:	40d8      	lsrs	r0, r3
 800127a:	4770      	bx	lr
 800127c:	40023800 	.word	0x40023800
 8001280:	08001cf8 	.word	0x08001cf8
 8001284:	2000000c 	.word	0x2000000c

08001288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001288:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800128a:	6803      	ldr	r3, [r0, #0]
 800128c:	68c1      	ldr	r1, [r0, #12]
 800128e:	691a      	ldr	r2, [r3, #16]
{
 8001290:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001292:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001296:	430a      	orrs	r2, r1
 8001298:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800129a:	6925      	ldr	r5, [r4, #16]
 800129c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800129e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012a0:	69c0      	ldr	r0, [r0, #28]
 80012a2:	432a      	orrs	r2, r5
 80012a4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012a6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012aa:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80012ac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012b0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80012b2:	430a      	orrs	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	69a1      	ldr	r1, [r4, #24]
 80012ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012be:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	4a25      	ldr	r2, [pc, #148]	; (800135c <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c8:	d129      	bne.n	800131e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d003      	beq.n	80012d6 <UART_SetConfig+0x4e>
 80012ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d120      	bne.n	8001318 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80012d6:	f7ff ffc7 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012da:	6862      	ldr	r2, [r4, #4]
 80012dc:	6825      	ldr	r5, [r4, #0]
 80012de:	1892      	adds	r2, r2, r2
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	f04f 0119 	mov.w	r1, #25
 80012e8:	415b      	adcs	r3, r3
 80012ea:	fba0 0101 	umull	r0, r1, r0, r1
 80012ee:	f7fe ff7d 	bl	80001ec <__aeabi_uldivmod>
 80012f2:	2164      	movs	r1, #100	; 0x64
 80012f4:	fbb0 f4f1 	udiv	r4, r0, r1
 80012f8:	fb01 0314 	mls	r3, r1, r4, r0
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	3332      	adds	r3, #50	; 0x32
 8001300:	fbb3 f3f1 	udiv	r3, r3, r1
 8001304:	f003 0207 	and.w	r2, r3, #7
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800130e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001312:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001314:	60ab      	str	r3, [r5, #8]
 8001316:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001318:	f7ff ff96 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 800131c:	e7dd      	b.n	80012da <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800131e:	4293      	cmp	r3, r2
 8001320:	d002      	beq.n	8001328 <UART_SetConfig+0xa0>
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <UART_SetConfig+0xd8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d116      	bne.n	8001356 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001328:	f7ff ff9e 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	6825      	ldr	r5, [r4, #0]
 8001330:	2119      	movs	r1, #25
 8001332:	009a      	lsls	r2, r3, #2
 8001334:	fba0 0101 	umull	r0, r1, r0, r1
 8001338:	0f9b      	lsrs	r3, r3, #30
 800133a:	f7fe ff57 	bl	80001ec <__aeabi_uldivmod>
 800133e:	2264      	movs	r2, #100	; 0x64
 8001340:	fbb0 f1f2 	udiv	r1, r0, r2
 8001344:	fb02 0311 	mls	r3, r2, r1, r0
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	3332      	adds	r3, #50	; 0x32
 800134c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001350:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001354:	e7de      	b.n	8001314 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001356:	f7ff ff77 	bl	8001248 <HAL_RCC_GetPCLK1Freq>
 800135a:	e7e7      	b.n	800132c <UART_SetConfig+0xa4>
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400

08001364 <HAL_UART_Init>:
{
 8001364:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001366:	4604      	mov	r4, r0
 8001368:	b340      	cbz	r0, 80013bc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800136a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800136e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001372:	b91b      	cbnz	r3, 800137c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001374:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001378:	f000 fbc4 	bl	8001b04 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800137c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800137e:	2324      	movs	r3, #36	; 0x24
 8001380:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001384:	68d3      	ldr	r3, [r2, #12]
 8001386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800138a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff ff7b 	bl	8001288 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800139a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013a2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013aa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80013ae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80013b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80013ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
}
 80013be:	bd10      	pop	{r4, pc}

080013c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80013c2:	3b01      	subs	r3, #1
 80013c4:	d101      	bne.n	80013ca <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80013c6:	2003      	movs	r0, #3
 80013c8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80013ca:	6902      	ldr	r2, [r0, #16]
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	daf8      	bge.n	80013c2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80013d0:	6903      	ldr	r3, [r0, #16]
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <USB_CoreReset+0x2c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80013da:	3a01      	subs	r2, #1
 80013dc:	d0f3      	beq.n	80013c6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80013de:	6903      	ldr	r3, [r0, #16]
 80013e0:	f013 0301 	ands.w	r3, r3, #1
 80013e4:	d1f9      	bne.n	80013da <USB_CoreReset+0x1a>

  return HAL_OK;
 80013e6:	4618      	mov	r0, r3
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	00030d41 	.word	0x00030d41

080013f0 <USB_CoreInit>:
{
 80013f0:	b084      	sub	sp, #16
 80013f2:	b538      	push	{r3, r4, r5, lr}
 80013f4:	ad05      	add	r5, sp, #20
 80013f6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80013fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013fc:	2b01      	cmp	r3, #1
{
 80013fe:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001400:	d125      	bne.n	800144e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001402:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800140a:	68c3      	ldr	r3, [r0, #12]
 800140c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001414:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001416:	68c3      	ldr	r3, [r0, #12]
 8001418:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800141c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800141e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001420:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001422:	bf02      	ittt	eq
 8001424:	68c3      	ldreq	r3, [r0, #12]
 8001426:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800142a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800142c:	f7ff ffc8 	bl	80013c0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001430:	9b08      	ldr	r3, [sp, #32]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001436:	68a3      	ldr	r3, [r4, #8]
 8001438:	f043 0306 	orr.w	r3, r3, #6
 800143c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800143e:	68a3      	ldr	r3, [r4, #8]
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	60a3      	str	r3, [r4, #8]
}
 8001446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800144a:	b004      	add	sp, #16
 800144c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800144e:	68c3      	ldr	r3, [r0, #12]
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001456:	f7ff ffb3 	bl	80013c0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800145a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800145c:	b923      	cbnz	r3, 8001468 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800145e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001464:	63a3      	str	r3, [r4, #56]	; 0x38
 8001466:	e7e3      	b.n	8001430 <USB_CoreInit+0x40>
 8001468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	e7f9      	b.n	8001464 <USB_CoreInit+0x74>

08001470 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001470:	6883      	ldr	r3, [r0, #8]
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6083      	str	r3, [r0, #8]
}
 8001478:	2000      	movs	r0, #0
 800147a:	4770      	bx	lr

0800147c <USB_SetCurrentMode>:
{
 800147c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800147e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001480:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001482:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001486:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001488:	d108      	bne.n	800149c <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800148a:	68c3      	ldr	r3, [r0, #12]
 800148c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001490:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f7ff f882 	bl	800059c <HAL_Delay>
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800149c:	b919      	cbnz	r1, 80014a6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800149e:	68c3      	ldr	r3, [r0, #12]
 80014a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014a4:	e7f4      	b.n	8001490 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
}
 80014a8:	bd08      	pop	{r3, pc}
	...

080014ac <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80014ac:	0189      	lsls	r1, r1, #6
 80014ae:	f041 0120 	orr.w	r1, r1, #32
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <USB_FlushTxFifo+0x20>)
 80014b4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80014b6:	3a01      	subs	r2, #1
 80014b8:	d005      	beq.n	80014c6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80014ba:	6903      	ldr	r3, [r0, #16]
 80014bc:	f013 0320 	ands.w	r3, r3, #32
 80014c0:	d1f9      	bne.n	80014b6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80014c2:	4618      	mov	r0, r3
 80014c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80014c6:	2003      	movs	r0, #3
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	00030d41 	.word	0x00030d41

080014d0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80014d0:	2310      	movs	r3, #16
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <USB_FlushRxFifo+0x1c>)
 80014d4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80014d6:	3a01      	subs	r2, #1
 80014d8:	d005      	beq.n	80014e6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80014da:	6903      	ldr	r3, [r0, #16]
 80014dc:	f013 0310 	ands.w	r3, r3, #16
 80014e0:	d1f9      	bne.n	80014d6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80014e2:	4618      	mov	r0, r3
 80014e4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80014e6:	2003      	movs	r0, #3
}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	00030d41 	.word	0x00030d41

080014f0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80014f0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80014f4:	4319      	orrs	r1, r3
 80014f6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80014fa:	2000      	movs	r0, #0
 80014fc:	4770      	bx	lr
	...

08001500 <USB_DevInit>:
{
 8001500:	b084      	sub	sp, #16
 8001502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001506:	4604      	mov	r4, r0
 8001508:	a809      	add	r0, sp, #36	; 0x24
 800150a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001512:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8001514:	4619      	mov	r1, r3
 8001516:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800151a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800151e:	3301      	adds	r3, #1
 8001520:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8001522:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001524:	d1f7      	bne.n	8001516 <USB_DevInit+0x16>
 8001526:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800152a:	2d00      	cmp	r5, #0
 800152c:	d16c      	bne.n	8001608 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800152e:	6873      	ldr	r3, [r6, #4]
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6073      	str	r3, [r6, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800153e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001540:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001544:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800154c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001554:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001558:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800155c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800155e:	2b01      	cmp	r3, #1
 8001560:	d15c      	bne.n	800161c <USB_DevInit+0x11c>
    if (cfg.speed == USBD_HS_SPEED)
 8001562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001564:	2900      	cmp	r1, #0
 8001566:	d157      	bne.n	8001618 <USB_DevInit+0x118>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001568:	4620      	mov	r0, r4
 800156a:	f7ff ffc1 	bl	80014f0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800156e:	2110      	movs	r1, #16
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ff9b 	bl	80014ac <USB_FlushTxFifo>
 8001576:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff ffa9 	bl	80014d0 <USB_FlushRxFifo>
 800157e:	2800      	cmp	r0, #0
 8001580:	d14e      	bne.n	8001620 <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001582:	1c08      	adds	r0, r1, #0
 8001584:	bf18      	it	ne
 8001586:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	6133      	str	r3, [r6, #16]
 800158c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001590:	6173      	str	r3, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001592:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8001594:	61f3      	str	r3, [r6, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001596:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800159a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800159e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80015a2:	42bb      	cmp	r3, r7
 80015a4:	d13e      	bne.n	8001624 <USB_DevInit+0x124>
 80015a6:	2100      	movs	r1, #0
 80015a8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80015ac:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80015ae:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80015b2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80015b6:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80015ba:	428b      	cmp	r3, r1
 80015bc:	d145      	bne.n	800164a <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80015be:	6933      	ldr	r3, [r6, #16]
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80015ca:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80015ce:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80015d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80015d2:	b91b      	cbnz	r3, 80015dc <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80015d4:	69a3      	ldr	r3, [r4, #24]
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80015dc:	69a2      	ldr	r2, [r4, #24]
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <USB_DevInit+0x170>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80015e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80015e6:	b11b      	cbz	r3, 80015f0 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80015e8:	69a3      	ldr	r3, [r4, #24]
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80015f0:	2d01      	cmp	r5, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80015f2:	bf01      	itttt	eq
 80015f4:	69a3      	ldreq	r3, [r4, #24]
 80015f6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80015fa:	f043 0304 	orreq.w	r3, r3, #4
 80015fe:	61a3      	streq	r3, [r4, #24]
}
 8001600:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001604:	b004      	add	sp, #16
 8001606:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001608:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800160a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800160e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001616:	e799      	b.n	800154c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001618:	4619      	mov	r1, r3
 800161a:	e7a5      	b.n	8001568 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800161c:	2103      	movs	r1, #3
 800161e:	e7a3      	b.n	8001568 <USB_DevInit+0x68>
 8001620:	2001      	movs	r0, #1
 8001622:	e7b1      	b.n	8001588 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001624:	f8d2 9000 	ldr.w	r9, [r2]
 8001628:	f1b9 0f00 	cmp.w	r9, #0
 800162c:	da0b      	bge.n	8001646 <USB_DevInit+0x146>
      if (i == 0U)
 800162e:	b93b      	cbnz	r3, 8001640 <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001630:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001634:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001636:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001638:	f8c2 8008 	str.w	r8, [r2, #8]
 800163c:	3220      	adds	r2, #32
 800163e:	e7b0      	b.n	80015a2 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001640:	f8c2 e000 	str.w	lr, [r2]
 8001644:	e7f6      	b.n	8001634 <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001646:	6011      	str	r1, [r2, #0]
 8001648:	e7f4      	b.n	8001634 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800164a:	f8d2 9000 	ldr.w	r9, [r2]
 800164e:	f1b9 0f00 	cmp.w	r9, #0
 8001652:	da0b      	bge.n	800166c <USB_DevInit+0x16c>
      if (i == 0U)
 8001654:	b939      	cbnz	r1, 8001666 <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001656:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800165a:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800165c:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800165e:	f8c2 8008 	str.w	r8, [r2, #8]
 8001662:	3220      	adds	r2, #32
 8001664:	e7a9      	b.n	80015ba <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001666:	f8c2 e000 	str.w	lr, [r2]
 800166a:	e7f6      	b.n	800165a <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800166c:	6017      	str	r7, [r2, #0]
 800166e:	e7f4      	b.n	800165a <USB_DevInit+0x15a>
 8001670:	803c3800 	.word	0x803c3800

08001674 <USB_DevDisconnect>:
{
 8001674:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001676:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001682:	2003      	movs	r0, #3
 8001684:	f7fe ff8a 	bl	800059c <HAL_Delay>
}
 8001688:	2000      	movs	r0, #0
 800168a:	bd08      	pop	{r3, pc}

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b530      	push	{r4, r5, lr}
 800168e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001690:	2230      	movs	r2, #48	; 0x30
 8001692:	2100      	movs	r1, #0
 8001694:	a808      	add	r0, sp, #32
 8001696:	f000 fb13 	bl	8001cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169a:	2100      	movs	r1, #0
 800169c:	2214      	movs	r2, #20
 800169e:	a803      	add	r0, sp, #12
 80016a0:	f000 fb0e 	bl	8001cc0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	2400      	movs	r4, #0
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <SystemClock_Config+0x90>)
 80016a8:	9401      	str	r4, [sp, #4]
 80016aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <SystemClock_Config+0x94>)
 80016be:	9402      	str	r4, [sp, #8]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e2:	2304      	movs	r3, #4
 80016e4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e6:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016ea:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ee:	2307      	movs	r3, #7
 80016f0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f7ff fb31 	bl	8000d5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001702:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001704:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800170a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001710:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001712:	f7ff fcf7 	bl	8001104 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001716:	b015      	add	sp, #84	; 0x54
 8001718:	bd30      	pop	{r4, r5, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <order_switch_test>:
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void order_switch_test (void){
 8001724:	b508      	push	{r3, lr}
	int stateOfPushButton = 0;
	stateOfPushButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <order_switch_test+0x28>)
 800172c:	f7ff fa7c 	bl	8000c28 <HAL_GPIO_ReadPin>
	if (stateOfPushButton) {
 8001730:	b120      	cbz	r0, 800173c <order_switch_test+0x18>
			  if (leds_order == 0) leds_order =1;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <order_switch_test+0x2c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	b932      	cbnz	r2, 8001746 <order_switch_test+0x22>
 8001738:	2201      	movs	r2, #1
			  else leds_order = 0;
 800173a:	601a      	str	r2, [r3, #0]
		  }
	HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	; 0x64
}
 800173e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 8001742:	f7fe bf2b 	b.w	800059c <HAL_Delay>
			  else leds_order = 0;
 8001746:	2200      	movs	r2, #0
 8001748:	e7f7      	b.n	800173a <order_switch_test+0x16>
 800174a:	bf00      	nop
 800174c:	40020800 	.word	0x40020800
 8001750:	20000008 	.word	0x20000008

08001754 <main>:
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001758:	f7fe fef4 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 800175c:	f7ff ff96 	bl	800168c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	2214      	movs	r2, #20
 8001762:	2100      	movs	r1, #0
 8001764:	a807      	add	r0, sp, #28
 8001766:	f000 faab 	bl	8001cc0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2400      	movs	r4, #0
 800176c:	4b85      	ldr	r3, [pc, #532]	; (8001984 <main+0x230>)
 800176e:	9401      	str	r4, [sp, #4]
 8001770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001772:	4885      	ldr	r0, [pc, #532]	; (8001988 <main+0x234>)
	          if ( !leds_order ) {
 8001774:	4f85      	ldr	r7, [pc, #532]	; (800198c <main+0x238>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	f042 0204 	orr.w	r2, r2, #4
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177e:	f002 0204 	and.w	r2, r2, #4
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	9402      	str	r4, [sp, #8]
 8001788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
 8001790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	9403      	str	r4, [sp, #12]
 800179c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
 80017a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a6:	f002 0201 	and.w	r2, r2, #1
 80017aa:	9203      	str	r2, [sp, #12]
 80017ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	9404      	str	r4, [sp, #16]
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
 80017b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ba:	f002 0202 	and.w	r2, r2, #2
 80017be:	9204      	str	r2, [sp, #16]
 80017c0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	9405      	str	r4, [sp, #20]
 80017c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c6:	f042 0208 	orr.w	r2, r2, #8
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
 80017cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ce:	f002 0208 	and.w	r2, r2, #8
 80017d2:	9205      	str	r2, [sp, #20]
 80017d4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d6:	9406      	str	r4, [sp, #24]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017e8:	4622      	mov	r2, r4
 80017ea:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ee:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017f0:	f7ff fa20 	bl	8000c34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017f4:	4622      	mov	r2, r4
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4865      	ldr	r0, [pc, #404]	; (8001990 <main+0x23c>)
 80017fa:	f7ff fa1b 	bl	8000c34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001804:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <main+0x240>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001808:	4863      	ldr	r0, [pc, #396]	; (8001998 <main+0x244>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001810:	f7ff f91e 	bl	8000a50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001814:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	a907      	add	r1, sp, #28
 800181a:	485b      	ldr	r0, [pc, #364]	; (8001988 <main+0x234>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800181c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f7ff f914 	bl	8000a50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001828:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800182a:	a907      	add	r1, sp, #28
 800182c:	4858      	ldr	r0, [pc, #352]	; (8001990 <main+0x23c>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800182e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001830:	2680      	movs	r6, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001838:	f7ff f90a 	bl	8000a50 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800183c:	a907      	add	r1, sp, #28
 800183e:	4854      	ldr	r0, [pc, #336]	; (8001990 <main+0x23c>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001840:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001846:	f7ff f903 	bl	8000a50 <HAL_GPIO_Init>
  heth.Instance = ETH;
 800184a:	4854      	ldr	r0, [pc, #336]	; (800199c <main+0x248>)
 800184c:	4b54      	ldr	r3, [pc, #336]	; (80019a0 <main+0x24c>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800184e:	8204      	strh	r4, [r0, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001850:	e880 0028 	stmia.w	r0, {r3, r5}
  heth.Init.MACAddr[0] =   0x00;
 8001854:	6943      	ldr	r3, [r0, #20]
 8001856:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001858:	6943      	ldr	r3, [r0, #20]
 800185a:	705e      	strb	r6, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 800185c:	6943      	ldr	r3, [r0, #20]
	  pause_switch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800185e:	4e4e      	ldr	r6, [pc, #312]	; (8001998 <main+0x244>)
  heth.Init.MACAddr[2] =   0xE1;
 8001860:	22e1      	movs	r2, #225	; 0xe1
 8001862:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 8001864:	6943      	ldr	r3, [r0, #20]
 8001866:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 8001868:	6943      	ldr	r3, [r0, #20]
 800186a:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 800186c:	6943      	ldr	r3, [r0, #20]
 800186e:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001870:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001874:	6203      	str	r3, [r0, #32]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001876:	6184      	str	r4, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001878:	61c4      	str	r4, [r0, #28]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 800187a:	f7fe ffed 	bl	8000858 <HAL_ETH_Init>
  huart3.Instance = USART3;
 800187e:	4849      	ldr	r0, [pc, #292]	; (80019a4 <main+0x250>)
  huart3.Init.BaudRate = 115200;
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <main+0x254>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001884:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001888:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800188c:	230c      	movs	r3, #12
 800188e:	6143      	str	r3, [r0, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001890:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001892:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001894:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001896:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001898:	f7ff fd64 	bl	8001364 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800189c:	4843      	ldr	r0, [pc, #268]	; (80019ac <main+0x258>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800189e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80018a2:	2304      	movs	r3, #4
 80018a4:	e880 000a 	stmia.w	r0, {r1, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018a8:	2302      	movs	r3, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018aa:	61c5      	str	r5, [r0, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018ac:	62c5      	str	r5, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018ae:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018b0:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018b2:	6183      	str	r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018b4:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018b6:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018b8:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018ba:	f7ff f9c7 	bl	8000c4c <HAL_PCD_Init>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018be:	4d32      	ldr	r5, [pc, #200]	; (8001988 <main+0x234>)
	  pause_switch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80018c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c4:	4630      	mov	r0, r6
 80018c6:	f7ff f9af 	bl	8000c28 <HAL_GPIO_ReadPin>
	  if (pause_switch == 1){
 80018ca:	2801      	cmp	r0, #1
 80018cc:	d129      	bne.n	8001922 <main+0x1ce>
		  if (pause == 0) pause = 1;
 80018ce:	b354      	cbz	r4, 8001926 <main+0x1d2>
	          if ( !leds_order ) {
 80018d0:	683c      	ldr	r4, [r7, #0]
 80018d2:	bb74      	cbnz	r4, 8001932 <main+0x1de>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80018d4:	4628      	mov	r0, r5
 80018d6:	2101      	movs	r1, #1
 80018d8:	f7ff f9b1 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 80018dc:	f7ff ff22 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80018e0:	4628      	mov	r0, r5
 80018e2:	2101      	movs	r1, #1
 80018e4:	f7ff f9ab 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 80018e8:	f7ff ff1c 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80018ec:	4628      	mov	r0, r5
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	f7ff f9a5 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 80018f4:	f7ff ff16 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80018f8:	4628      	mov	r0, r5
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	f7ff f99f 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 8001900:	f7ff ff10 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001904:	4628      	mov	r0, r5
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	f7ff f998 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800190e:	f7ff ff09 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001916:	4628      	mov	r0, r5
 8001918:	f7ff f991 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800191c:	f7ff ff02 	bl	8001724 <order_switch_test>
 8001920:	e7ce      	b.n	80018c0 <main+0x16c>
	  if (!pause){
 8001922:	2c00      	cmp	r4, #0
 8001924:	d0d4      	beq.n	80018d0 <main+0x17c>
	  }else HAL_Delay(2000);
 8001926:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192a:	f7fe fe37 	bl	800059c <HAL_Delay>
 800192e:	2401      	movs	r4, #1
 8001930:	e7c6      	b.n	80018c0 <main+0x16c>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4628      	mov	r0, r5
 8001938:	f7ff f981 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800193c:	f7ff fef2 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001944:	4628      	mov	r0, r5
 8001946:	f7ff f97a 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800194a:	f7ff feeb 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	4628      	mov	r0, r5
 8001952:	f7ff f974 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 8001956:	f7ff fee5 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	4628      	mov	r0, r5
 800195e:	f7ff f96e 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 8001962:	f7ff fedf 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001966:	2101      	movs	r1, #1
 8001968:	4628      	mov	r0, r5
 800196a:	f7ff f968 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800196e:	f7ff fed9 	bl	8001724 <order_switch_test>
	        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001972:	2101      	movs	r1, #1
 8001974:	4628      	mov	r0, r5
 8001976:	f7ff f962 	bl	8000c3e <HAL_GPIO_TogglePin>
	        	  order_switch_test ();
 800197a:	2400      	movs	r4, #0
 800197c:	f7ff fed2 	bl	8001724 <order_switch_test>
 8001980:	e79e      	b.n	80018c0 <main+0x16c>
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020400 	.word	0x40020400
 800198c:	20000008 	.word	0x20000008
 8001990:	40021800 	.word	0x40021800
 8001994:	10110000 	.word	0x10110000
 8001998:	40020800 	.word	0x40020800
 800199c:	20000478 	.word	0x20000478
 80019a0:	40028000 	.word	0x40028000
 80019a4:	20000030 	.word	0x20000030
 80019a8:	40004800 	.word	0x40004800
 80019ac:	20000070 	.word	0x20000070

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x34>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	9100      	str	r1, [sp, #0]
 80019b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
 80019c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	9101      	str	r1, [sp, #4]
 80019cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	2214      	movs	r2, #20
 80019f0:	2100      	movs	r1, #0
 80019f2:	a807      	add	r0, sp, #28
 80019f4:	f000 f964 	bl	8001cc0 <memset>
  if(heth->Instance==ETH)
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_ETH_MspInit+0x108>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d174      	bne.n	8001aea <HAL_ETH_MspInit+0x102>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a00:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8001a04:	2400      	movs	r4, #0
 8001a06:	9400      	str	r4, [sp, #0]
 8001a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	483a      	ldr	r0, [pc, #232]	; (8001af4 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a0c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
 8001a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a14:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001a18:	9200      	str	r2, [sp, #0]
 8001a1a:	9a00      	ldr	r2, [sp, #0]
 8001a1c:	9401      	str	r4, [sp, #4]
 8001a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a20:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
 8001a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a28:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	9402      	str	r4, [sp, #8]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a40:	9202      	str	r2, [sp, #8]
 8001a42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	9403      	str	r4, [sp, #12]
 8001a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a48:	f042 0204 	orr.w	r2, r2, #4
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	f002 0204 	and.w	r2, r2, #4
 8001a54:	9203      	str	r2, [sp, #12]
 8001a56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	9404      	str	r4, [sp, #16]
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
 8001a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a64:	f002 0201 	and.w	r2, r2, #1
 8001a68:	9204      	str	r2, [sp, #16]
 8001a6a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	9405      	str	r4, [sp, #20]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	f042 0202 	orr.w	r2, r2, #2
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
 8001a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a78:	f002 0202 	and.w	r2, r2, #2
 8001a7c:	9205      	str	r2, [sp, #20]
 8001a7e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a80:	9406      	str	r4, [sp, #24]
 8001a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a96:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a98:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a9c:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001aa0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	f7fe ffd3 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001aaa:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	a907      	add	r1, sp, #28
 8001aae:	4812      	ldr	r0, [pc, #72]	; (8001af8 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ab0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ab8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f7fe ffc9 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	a907      	add	r1, sp, #28
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ac6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ace:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f7fe ffbe 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad8:	a907      	add	r1, sp, #28
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001adc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae6:	f7fe ffb3 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001aea:	b00d      	add	sp, #52	; 0x34
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40028000 	.word	0x40028000
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40021800 	.word	0x40021800

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4604      	mov	r4, r0
 8001b08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	2214      	movs	r2, #20
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	a803      	add	r0, sp, #12
 8001b10:	f000 f8d6 	bl	8001cc0 <memset>
  if(huart->Instance==USART3)
 8001b14:	6822      	ldr	r2, [r4, #0]
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x64>)
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d123      	bne.n	8001b64 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001b20:	2100      	movs	r1, #0
 8001b22:	9101      	str	r1, [sp, #4]
 8001b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b30:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001b34:	9201      	str	r2, [sp, #4]
 8001b36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b38:	9102      	str	r1, [sp, #8]
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3c:	f042 0208 	orr.w	r2, r2, #8
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b60:	f7fe ff76 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b64:	b008      	add	sp, #32
 8001b66:	bd10      	pop	{r4, pc}
 8001b68:	40004800 	.word	0x40004800
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b70:	b530      	push	{r4, r5, lr}
 8001b72:	4604      	mov	r4, r0
 8001b74:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	2214      	movs	r2, #20
 8001b78:	2100      	movs	r1, #0
 8001b7a:	a803      	add	r0, sp, #12
 8001b7c:	f000 f8a0 	bl	8001cc0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b86:	d12f      	bne.n	8001be8 <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4c18      	ldr	r4, [pc, #96]	; (8001bec <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	9501      	str	r5, [sp, #4]
 8001b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6323      	str	r3, [r4, #48]	; 0x30
 8001b98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ba2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ba6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f7fe ff4b 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bba:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	a903      	add	r1, sp, #12
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f7fe ff42 	bl	8000a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd2:	6363      	str	r3, [r4, #52]	; 0x34
 8001bd4:	9502      	str	r5, [sp, #8]
 8001bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6463      	str	r3, [r4, #68]	; 0x44
 8001bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001be8:	b009      	add	sp, #36	; 0x24
 8001bea:	bd30      	pop	{r4, r5, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <NMI_Handler>:
 8001bf4:	4770      	bx	lr

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler>

08001bfe <SVC_Handler>:
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c04:	f7fe bcb8 	b.w	8000578 <HAL_IncTick>

08001c08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SystemInit+0x18>)
 8001c0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c2a:	e003      	b.n	8001c34 <LoopCopyDataInit>

08001c2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c32:	3104      	adds	r1, #4

08001c34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c34:	480b      	ldr	r0, [pc, #44]	; (8001c64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c3c:	d3f6      	bcc.n	8001c2c <CopyDataInit>
  ldr  r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c40:	e002      	b.n	8001c48 <LoopFillZerobss>

08001c42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c44:	f842 3b04 	str.w	r3, [r2], #4

08001c48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c4c:	d3f9      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c4e:	f7ff ffdb 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f000 f811 	bl	8001c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c56:	f7ff fd7d 	bl	8001754 <main>
  bx  lr    
 8001c5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c5c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c60:	08001d10 	.word	0x08001d10
  ldr  r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c68:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001c6c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001c70:	200004c0 	.word	0x200004c0

08001c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC_IRQHandler>
	...

08001c78 <__libc_init_array>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	4e0d      	ldr	r6, [pc, #52]	; (8001cb0 <__libc_init_array+0x38>)
 8001c7c:	4c0d      	ldr	r4, [pc, #52]	; (8001cb4 <__libc_init_array+0x3c>)
 8001c7e:	1ba4      	subs	r4, r4, r6
 8001c80:	10a4      	asrs	r4, r4, #2
 8001c82:	2500      	movs	r5, #0
 8001c84:	42a5      	cmp	r5, r4
 8001c86:	d109      	bne.n	8001c9c <__libc_init_array+0x24>
 8001c88:	4e0b      	ldr	r6, [pc, #44]	; (8001cb8 <__libc_init_array+0x40>)
 8001c8a:	4c0c      	ldr	r4, [pc, #48]	; (8001cbc <__libc_init_array+0x44>)
 8001c8c:	f000 f820 	bl	8001cd0 <_init>
 8001c90:	1ba4      	subs	r4, r4, r6
 8001c92:	10a4      	asrs	r4, r4, #2
 8001c94:	2500      	movs	r5, #0
 8001c96:	42a5      	cmp	r5, r4
 8001c98:	d105      	bne.n	8001ca6 <__libc_init_array+0x2e>
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca0:	4798      	blx	r3
 8001ca2:	3501      	adds	r5, #1
 8001ca4:	e7ee      	b.n	8001c84 <__libc_init_array+0xc>
 8001ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001caa:	4798      	blx	r3
 8001cac:	3501      	adds	r5, #1
 8001cae:	e7f2      	b.n	8001c96 <__libc_init_array+0x1e>
 8001cb0:	08001d08 	.word	0x08001d08
 8001cb4:	08001d08 	.word	0x08001d08
 8001cb8:	08001d08 	.word	0x08001d08
 8001cbc:	08001d0c 	.word	0x08001d0c

08001cc0 <memset>:
 8001cc0:	4402      	add	r2, r0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d100      	bne.n	8001cca <memset+0xa>
 8001cc8:	4770      	bx	lr
 8001cca:	f803 1b01 	strb.w	r1, [r3], #1
 8001cce:	e7f9      	b.n	8001cc4 <memset+0x4>

08001cd0 <_init>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	bf00      	nop
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr

08001cdc <_fini>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr
